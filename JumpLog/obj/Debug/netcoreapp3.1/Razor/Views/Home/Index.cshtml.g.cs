#pragma checksum "/Users/josh/Library/Mobile Documents/com~apple~CloudDocs/MSSA/CSC395/JumpLog/JumpLog/Views/Home/Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "23ad07f0e32a678dc9f22cf42eec5046856532ae"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Users/josh/Library/Mobile Documents/com~apple~CloudDocs/MSSA/CSC395/JumpLog/JumpLog/Views/_ViewImports.cshtml"
using JumpLog;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/josh/Library/Mobile Documents/com~apple~CloudDocs/MSSA/CSC395/JumpLog/JumpLog/Views/_ViewImports.cshtml"
using JumpLog.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"23ad07f0e32a678dc9f22cf42eec5046856532ae", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"539ad4111112420b1b7a20e986b3b68300bce587", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "/Users/josh/Library/Mobile Documents/com~apple~CloudDocs/MSSA/CSC395/JumpLog/JumpLog/Views/Home/Index.cshtml"
  
    ViewData["Title"] = "Jump Log Tracker";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<!--
    Obective:
    - Search for individuals
    - Add, edit, delete, archive, transfer individuals
    - Reassign soldier to new company, unit, battalion
    - Add, edit, delete jumps
        - When jump added reflects on pay calendar to show currency
    - Upload documents for each individual that explains exception in jump status
        - Deployment, COVID, etc.
    - Email jump info to new unit
    - Filter list by jump date, delinquency, duty
    - Alerts when guys are delinquent or coming soon (sent to Air NCOIC)

    Base Functionality:
    - Start with company-level database
    - Search, add, edit, remove guys
    - View soldier's jump overview
    - Add individual jump
        - Date, time, bird, airfield, parachute, duty
    - Update pay status for soldier
        - Create method to keep track of pay status
    - Filter view based on dates, delinquency, duties

    Notes from Alex
    - SQL Lite - easy to use, not very good with enterprise apps
    - SQL Server - good for enterprise use
    - ");
            WriteLiteral(@"Entity Framework - makes connecting app to database simpler
    - .NET Core vs .NET Framework - Core is newer and cross-platform, MSFT recommends .Net Core if given the choice
    - Don't worry about having to redesign app later on as you learn more

    Next Meeting Tasks
    - Figure out Soldiers model to keep track of soldiers
    - Connect forms to Soldiers modle to add new soldiers
    - Style pages
-->

<div class=""hero section"">
    <div class=""row"">
        <div class=""col-lg"">
            <h1>Track your unit's jumps.</h1>
            <h2>Faster. Easier. More efficient.</h2>
            <p>Get rid of those stacks of binders and save yourself a ton of time.</p>
        </div>
");
            WriteLiteral(@"    </div>
    
</div>


<div class=""why section text-center"">
    <h3 class=""why-header"">How this can save you time</h3>
    <div class=""row"">
        <div class=""col-sm text-center"">
            <h4>No More Binders</h4>
            <p>Instead of using stacks of binders to keep track of soldiers and jumps, everything is kept online.</p>
        </div>
        <div class=""col-sm text-center"">
            <h4>Log Everything Instantly</h4>
            <p>Log jumps in minutes for all of your soldiers instead of looking through binders for hours.</p>
        </div>
        <div class=""col-sm text-center"">
            <h4>Keeps Track of Pay Status</h4>
            <p>Keeps track of jump pay status and ensures soldiers are getting paid accurately.</p>
        </div>
    </div>
</div>


<div class=""tracker section"">
    <h1 class=""display-4"">Jump Log Tracker</h1>
    <p>Keep track of jump records including the following:</p>
    <div class=""row text-center"">
        <div class=""col-sm"">
            <div class=""card""");
            WriteLiteral(@">
                <div class=""card-body"">
                    <p class=""card-title"">Name</p>
                </div>
            </div>
            <div class=""card"">
                <div class=""card-body"">
                    <p class=""card-title"">Date</p>
                </div>
            </div>
            <div class=""card"">
                <div class=""card-body"">
                    <p class=""card-title"">Location</p>
                </div>
            </div>
        </div>
        <div class=""col-sm"">
            <div class=""card"">
                <div class=""card-body"">
                    <p class=""card-title"">Duty Status</p>
                </div>
            </div>
            <div class=""card"">
                <div class=""card-body"">
                    <p class=""card-title"">Aircraft Type</p>
                </div>
            </div>
            <div class=""card"">
                <div class=""card-body"">
                    <p class=""card-title"">Type of Jump</p>
                </div>
            </di");
            WriteLiteral(@"v>
        </div>
    </div>
</div>


<div class=""section"">
    <table class=""table"">
        <thead>
            <tr>
                <th scope=""col"">#</th>
                <th scope=""col"">Last</th>
                <th scope=""col"">First</th>
                <th scope=""col"">Rank</th>
                <th scope=""col"">DOD ID</th>
                <th scope=""col"">SSN</th>
                <th scope=""col"">Company</th>
                <th scope=""col"">Platoon</th>
                <th scope=""col"">Date Arrived</th>
            </tr>
        </thead>

        <tbody>
        </tbody>
    </table>
</div>





");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
